framework/base/core/java/android/content/BroadcastReceiver.java
framework/base/core/java/android/content/Context.java
framework/base/core/java/android/content/IntentFilter.java

framework/base/core/java/android/app/ContextImpl.java
framework/base/core/java/android/app/LoadedApk
framework/base/core/java/android/app/ActivityManagerNative.java
framework/base/core/java/android/app/ApplicationThreadNative.java
framework/base/core/java/android/app/ActivityThread.java

framework/base/services/core/java/com/android/server/ActivityManagerService.java
framework/base/services/core/java/com/android/server/am/BroadcastQueue.java
framework/base/services/core/java/com/android/server/am/BroadcastFilter.java
framework/base/services/core/java/com/android/server/am/BroadcastRecord.java
framework/base/services/core/java/com/android/server/am/ReceiverList.java

一、概述
广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一。

BroadcastReceiver分为两类：

静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver。
动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册。
从广播发送方式可分为三类：

普通广播：通过Context.sendBroadcast()发送，可并行处理
有序广播：通过Context.sendOrderedBroadcast()发送，串行处理
Sticky广播：通过Context.sendStickyBroadcast()发送

1.1 BroadcastRecord
广播在系统中以BroadcastRecord对象来记录, 该对象有几个时间相关的成员变量.

final class BroadcastRecord extends Binder {
    final String callerPackage; //广播发送者
    final int callingPid;   // 广播发送者pid
    final List receivers;   // 广播接收者
    int nextReceiver;  // 下一个被执行的接收者
    IBinder receiver; // 当前正在处理的接收者
    int anrCount;   //广播ANR次数
    
    long enqueueClockTime;  //入队列时间
    long dispatchTime;      //分发时间 
    long dispatchClockTime; //分发时间
    long receiverTime;      //接收时间(首次等于dispatchClockTime)
    long finishTime;        //广播完成时间
    
}
enqueueClockTime 伴随着 scheduleBroadcastsLocked
dispatchClockTime伴随着 deliverToRegisteredReceiverLocked
finishTime 位于 addBroadcastToHistoryLocked方法内

二、注册广播
广播注册，对于应用开发来说，往往是在Activity/Service中调用registerReceiver()方法，而Activity或Service都间接继承于Context抽象类，
真正干活是交给ContextImpl类。另外调用getOuterContext()可获取最外层的调用者Activity或Service。

registerReceiver(BroadcastReceiver receiver, IntentFilter filter); framework/base/core/java/android/app/ContextImpl.java
	registerReceiver(receiver, filter, null, null) framework/base/core/java/android/app/ContextImpl.java
		registerReceiverInternal(receiver, getUserId(),filter, broadcastPermission, scheduler, getOuterContext()) framework/base/core/java/android/app/ContextImpl.java //其中broadcastPermission拥有广播的权限控制，scheduler用于指定接收到广播时onRecive执行线程，当scheduler=null则默认代表在主线程中执行，这也是最常见的用法
			mPackageInfo.getReceiverDispatcher(receiver, context, scheduler,mMainThread.getInstrumentation(), true) framework/base/core/java/android/app/ContextImpl.java  //mPackageInfo为LoadedApk对象。 创建LoadedApk.ReceiverDispatcher分发者。
				ReceiverDispatcher(BroadcastReceiver receiver, Context context,Handler activityThread, Instrumentation instrumentation,boolean registered) frameworks/base/core/java/android/app/LoadedApk.java //当广播分发者为空，则创建ReceiverDispatcher
					InnerReceiver(LoadedApk.ReceiverDispatcher rd, boolean strong); frameworks/base/core/java/android/app/LoadedApk.java //ReceiverDispatcher(广播分发者)有一个内部类InnerReceiver，该类继承于IIntentReceiver.Stub。InnerReceiver持有ReceiverDispatcher对象。显然，这是一个Binder服务端，广播分发者通过rd.getIIntentReceiver()可获取该Binder服务端对象InnerReceiver，用于Binder IPC通信，来操作ReceiverDispatcher。
			 ActivityManagerNative.getDefault().registerReceiver(mMainThread.getApplicationThread(), mBasePackageName,rd, filter, broadcastPermission, userId); framework/base/core/java/android/app/ContextImpl.java 
				callerApp = getRecordForAppLocked(caller); framework/base/services/core/java/com/android/server/ActivityManagerService.java //从mLruProcesses查询调用者的进程信息
				filter.actionsIterator(); framework/base/services/core/java/com/android/server/ActivityManagerService.java //获取IntentFilter中的actions. 这就是平时所加需要监听的广播action
				filter.match(resolver, intent, true, TAG) framework/base/services/core/java/com/android/server/ActivityManagerService.java //查询匹配的sticky广播 ,//匹配成功，则将给intent添加到allSticky队列
				mRegisteredReceivers.put(receiver.asBinder(), rl); framework/base/services/core/java/com/android/server/ActivityManagerService.java  //新创建的接收者队列，添加到已注册广播队列。
				BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage, permission, callingUid, userId); framework/base/services/core/java/com/android/server/ActivityManagerService.java
				rl.add(bf); framework/base/services/core/java/com/android/server/ActivityManagerService.java  framework/base/services/core/java/com/android/server/ActivityManagerService.java //创建BroadcastFilter对象，并添加到接收者队列
				mReceiverResolver.addFilter(bf); framework/base/services/core/java/com/android/server/ActivityManagerService.java  //新创建的广播过滤者，添加到ReceiverResolver队列
				//所有匹配该filter的sticky广播执行入队操作,//如果没有使用sendStickyBroadcast，则allSticky=null。
总结：
创建ReceiverList(接收者队列)，并添加到AMS.mRegisteredReceivers(已注册广播队列)；
创建BroadcastFilter(广播过滤者)，并添加到AMS.mReceiverResolver；
当注册的是Sticky广播，则创建BroadcastRecord，并添加到BroadcastQueue的mParallelBroadcasts(并行广播队列)，注册后调用AMS来尽快处理该广播。

三：发送广播
sendBroadcast(Intent intent); framework/base/core/java/android/app/ContextImpl.java
	 ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null,Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false,getUserId());framework/base/core/java/android/app/ContextImpl.java broadcastIntent()  //方法有两个布尔参数serialized和sticky来共同决定是普通广播，有序广播，还是Sticky广播
		intent = verifyBroadcastLocked(intent); framework/base/services/core/java/com/android/server/ActivityManagerService.java  //验证广播intent是否有效
		getRecordForAppLocked(caller);framework/base/services/core/java/com/android/server/ActivityManagerService.java //获取调用者进程记录对象。
		broadcastIntentLocked(callerApp,callerApp != null ? callerApp.info.packageName : null,intent, resolvedType, resultTo, resultCode, resultData, resultExtras,requiredPermissions, appOp, null, serialized, sticky,callingPid, callingUid, userId); framework/base/core/java/android/app/ContextImpl.java
				//step1: 设置flag
				//step2: 广播权限验证
				//step3: 处理系统相关广播
				//step4: 增加sticky广播
				//step5: 查询receivers和registeredReceivers
				//step6: 处理并行广播
				//step7: 合并registeredReceivers到receivers
				//step8: 处理串行广播
			
				step1: 设置flag
				intent = new Intent(intent);
				//增加该flag，则广播不会发送给已停止的package
				intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);

				//当没有启动完成时，不允许启动新进程
				if (!mProcessesReady && (intent.getFlags()&Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) {
					intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
				}
				userId = handleIncomingUser(callingPid, callingUid, userId,
						true, ALLOW_NON_FULL, "broadcast", callerPackage);

				//检查发送广播时用户状态
				if (userId != UserHandle.USER_ALL && !isUserRunningLocked(userId, false)) {
					if ((callingUid != Process.SYSTEM_UID
							|| (intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0)
							&& !Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {
						return ActivityManager.BROADCAST_FAILED_USER_STOPPED;
					}
				}
				
				添加flag=FLAG_EXCLUDE_STOPPED_PACKAGES，保证已停止app不会收到该广播；
				当系统还没有启动完成，则不允许启动新进程,即只有动态注册receiver才能接受广播
				当非USER_ALL广播且当前用户并没有处于Running的情况下，除非是系统升级广播或者关机广播，否则直接返回。
				
				FLAG_RECEIVER_REGISTERED_ONLY //只允许已注册receiver接收广播
				FLAG_RECEIVER_REPLACE_PENDING //新广播会替代相同广播
				FLAG_RECEIVER_FOREGROUND //只允许前台receiver接收广播
				FLAG_RECEIVER_NO_ABORT //对于有序广播，先接收到的receiver无权抛弃广播
				FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT //Boot完成之前，只允许已注册receiver接收广播
				FLAG_RECEIVER_BOOT_UPGRADE //升级模式下，允许系统准备就绪前可以发送广播
				
				//step2: 广播权限验证
				int callingAppId = UserHandle.getAppId(callingUid);
				if (callingAppId == Process.SYSTEM_UID || callingAppId == Process.PHONE_UID
					|| callingAppId == Process.SHELL_UID || callingAppId == Process.BLUETOOTH_UID
					|| callingAppId == Process.NFC_UID || callingUid == 0) {
					//直接通过
				} else if (callerApp == null || !callerApp.persistent) {
					try {
						if (AppGlobals.getPackageManager().isProtectedBroadcast(
								intent.getAction())) {
							//不允许发送给受保护的广播
							throw new SecurityException(msg);
						} else if (AppWidgetManager.ACTION_APPWIDGET_CONFIGURE.equals(intent.getAction())) {
							...
						}
					} catch (RemoteException e) {
						return ActivityManager.BROADCAST_SUCCESS;
					}
				}
				
				对于callingAppId为SYSTEM_UID，PHONE_UID，SHELL_UID，BLUETOOTH_UID，NFC_UID之一或者callingUid == 0时都畅通无阻；
				否则当调用者进程为空 或者非persistent进程的情况下：
				当发送的是受保护广播mProtectedBroadcasts(只允许系统使用)，则抛出异常；
				当action为ACTION_APPWIDGET_CONFIGURE时，虽然不希望该应用发送这种广播，处于兼容性考虑，限制该广播只允许发送给自己，否则抛出异常。
				
				step3: 处理系统相关广播
				final String action = intent.getAction();
				if (action != null) {
					switch (action) {
						case Intent.ACTION_UID_REMOVED: //uid移除
						case Intent.ACTION_PACKAGE_REMOVED: //package移除
						case Intent.ACTION_PACKAGE_ADDED: //增加package
						case Intent.ACTION_PACKAGE_CHANGED: //package改变
        
						case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE: //外部设备不可用
						case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE: //外部设备可用

						case Intent.ACTION_TIMEZONE_CHANGED: //时区改变，通知所有运行中的进程
						case Intent.ACTION_TIME_CHANGED: //时间改变，通知所有运行中的进程
        
						case Intent.ACTION_CLEAR_DNS_CACHE: //DNS缓存清空
						case Proxy.PROXY_CHANGE_ACTION: //网络代理改变
						
						case  com.android.internal.telephony.TelephonyIntents.SECRET_CODE_ACTION:
							{
								String host = intent.getData() != null ? intent.getData().getHost() : null;
								if ("673687".equals(host)) {
									Log.d(TAG, "open autoCatchTraceView !!! 20s auto Stop !!!");
									autoCatchTraceView(20*1000);
									return ActivityManager.BROADCAST_SUCCESS;
								}else if("673673".equals(host)){
									Log.d(TAG, "open autoCatchSystemHprof !!! delay 100 ms   !!!");
									SendMsgForSystemHprof(100);
									return ActivityManager.BROADCAST_SUCCESS;
								}else if("79787223".equals(host)){
									autoCatchSysTrace(10*1000);
									return ActivityManager.BROADCAST_SUCCESS;
								}
								//[RUBY-20880][xulei] extend test feature for get systrace when skip frames
								if(LetvDebugManager.getInstance().checkCutCurrentHost(callingPid, callingUid, host))
									return ActivityManager.BROADCAST_SUCCESS;
									//end
								break;
							}
					}
				}
				这个过主要处于系统相关的10类广播,这里不就展开讲解了.如果想增加自己rom的逻辑可以尝试在这里增加。比如上面的

				//step4: 增加sticky广播
				if (sticky) {
					if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,
							callingPid, callingUid)
							!= PackageManager.PERMISSION_GRANTED) {
						throw new SecurityException("");
					}
					if (requiredPermissions != null && requiredPermissions.length > 0) {
						return ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION;
					}
				
					if (intent.getComponent() != null) {
					//当sticky广播发送给指定组件，则throw Exception
					}
					if (userId != UserHandle.USER_ALL) {
					//当非USER_ALL广播跟USER_ALL广播出现冲突,则throw Exception
					}

					ArrayMap<String, ArrayList<Intent>> stickies = mStickyBroadcasts.get(userId);
					if (stickies == null) {
						stickies = new ArrayMap<>();
						mStickyBroadcasts.put(userId, stickies);
					}
					ArrayList<Intent> list = stickies.get(intent.getAction());
					if (list == null) {
						list = new ArrayList<>();
						stickies.put(intent.getAction(), list);
					}
					final int stickiesCount = list.size();
					int i;
					for (i = 0; i < stickiesCount; i++) {
						if (intent.filterEquals(list.get(i))) {
							//替换已存在的sticky intent
							list.set(i, new Intent(intent));
							break;
						}
					}
					//新的intent追加到list
					if (i >= stickiesCount) {
						list.add(new Intent(intent));
					}
				}
				
				这个过程主要是将sticky广播增加到list，并放入mStickyBroadcasts里面。以供上文动态注册时使用。接前面注册部分:这里传进来的filter只有一个action，就是前面描述的CounterService.BROADCAST_COUNTER_ACTION了，这里先通过getStickiesLocked函数查找一下有没有对应的sticky intent列表存在。什么是Sticky Intent呢？我们在最后一次调用sendStickyBroadcast函数来发送某个Action类型的广播时，系统会把代表这个广播的Intent保存下来，这样，后来调用registerReceiver来注册相同Action类型的广播接收器，就会得到这个最后发出的广播。这就是为什么叫做Sticky Intent了，这个最后发出的广播虽然被处理完了，但是仍然被粘住在ActivityManagerService中，以便下一个注册相应Action类型的广播接收器还能继承处理。
				
				
				//step5: 查询receivers和registeredReceivers
				
				int[] users;
				if (userId == UserHandle.USER_ALL) {
					users = mStartedUserArray; //广播给所有已启动用户
				} else {
					users = new int[] {userId}; //广播给指定用户
				}

				List receivers = null;
				List<BroadcastFilter> registeredReceivers = null;
				//找出所有能接收该广播的receivers
				if ((intent.getFlags()&Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
					//根据intent查找相应的receivers
					receivers = collectReceiverComponents(intent, resolvedType, callingUid, users);
				}
				if (intent.getComponent() == null) {
					if (userId == UserHandle.USER_ALL && callingUid == Process.SHELL_UID) {
						UserManagerService ums = getUserManagerLocked();
						for (int i = 0; i < users.length; i++) {
							//shell用户是否开启允许debug功能
							if (ums.hasUserRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES, users[i])) {
								continue;
							}
							// 查询动态注册的广播
							List<BroadcastFilter> registeredReceiversForUser =
									mReceiverResolver.queryIntent(intent,
											resolvedType, false, users[i]);
							if (registeredReceivers == null) {
								registeredReceivers = registeredReceiversForUser;
							} else if (registeredReceiversForUser != null) {
								registeredReceivers.addAll(registeredReceiversForUser);
							}
						}
					} else {
						// 查询动态注册的广播
						registeredReceivers = mReceiverResolver.queryIntent(intent,
							resolvedType, false, userId);
						}
				}
						//根据intent查找相应的receivers
						private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,
									int callingUid, int[] users) {
									List<ResolveInfo> receivers = null;
							for (int user : users) {
								//调用PKMS.queryIntentReceivers，可获取AndroidManifest.xml声明的接收者信息
								List<ResolveInfo> newReceivers = AppGlobals.getPackageManager()
										.queryIntentReceivers(intent, resolvedType, STOCK_PM_FLAGS, user);
								if (receivers == null) {
									receivers = newReceivers;
								} else if (newReceivers != null) {
									...
									//将所用户的receiver整合到receivers
								}
							}
							return receivers;
						}
				
				receivers：记录着匹配当前intent的所有静态注册广播接收者；
				registeredReceivers：记录着匹配当前的所有动态注册的广播接收者。
				其中，mReceiverResolver是AMS的成员变量，记录着已注册的广播接收者的resolver.
				
				//step6: 处理并行广播
				
				//用于标识是否需要用新intent替换旧的intent。
				final boolean replacePending = (intent.getFlags()&Intent.FLAG_RECEIVER_REPLACE_PENDING) != 0;
				//处理并行广播
				int NR = registeredReceivers != null ? registeredReceivers.size() : 0;
				if (!ordered && NR > 0) {
					final BroadcastQueue queue = broadcastQueueForIntent(intent);
					//创建BroadcastRecord对象
					BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp,
							callerPackage, callingPid, callingUid, resolvedType, requiredPermissions,
							appOp, brOptions, registeredReceivers, resultTo, resultCode, resultData,
							resultExtras, ordered, sticky, false, userId);

					final boolean replaced = replacePending && queue.replaceParallelBroadcastLocked(r);
					if (!replaced) {
						//将BroadcastRecord加入到并行广播队列[见下文]
						queue.enqueueParallelBroadcastLocked(r);
						//处理广播【见小节4.1】
						queue.scheduleBroadcastsLocked();
					}
					registeredReceivers = null;
					NR = 0;                                 //注意此处非常重要，当处理完并行广播是要把NR置为0.因此一下的就不会被加入到动态广播中。动态注册进程可能已经启动，所以并行时先处理。
				}
					// 并行广播,加入mParallelBroadcasts队列
					public void enqueueParallelBroadcastLocked(BroadcastRecord r) {
						mParallelBroadcasts.add(r);
						r.enqueueClockTime = System.currentTimeMillis();
					}
				
				
				广播队列中有一个成员变量mParallelBroadcasts，类型为ArrayList，记录着所有的并行广播。
				
				
				//step7: 合并registeredReceivers到receivers
				int ir = 0;
				if (receivers != null) {
					//防止应用监听该广播，在安装时直接运行。
					String skipPackages[] = null;
					if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())
							|| Intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())
							|| Intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
						Uri data = intent.getData();
						if (data != null) {
							String pkgName = data.getSchemeSpecificPart();
							if (pkgName != null) {
								skipPackages = new String[] { pkgName };
							}
						}
					} else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(intent.getAction())) {
						skipPackages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
					}

					//将skipPackages相关的广播接收者从receivers列表中移除
					if (skipPackages != null && (skipPackages.length > 0)) {
						...
					}

					//[3.4.6]有一个处理动态广播的过程，处理完后再执行将动态注册的registeredReceivers合并到receivers
					int NT = receivers != null ? receivers.size() : 0;
					int it = 0;
					ResolveInfo curt = null;
					BroadcastFilter curr = null;
					while (it < NT && ir < NR) {
						if (curt == null) {
							curt = (ResolveInfo)receivers.get(it);
						}
						if (curr == null) {
							curr = registeredReceivers.get(ir);
						}
						if (curr.getPriority() >= curt.priority) {
							receivers.add(it, curr);
							ir++;
							curr = null;
							it++;
							NT++;
						} else {
							it++;
							curt = null;
						}
					}
				}
				while (ir < NR) {
					if (receivers == null) {
						receivers = new ArrayList();
					}
					receivers.add(registeredReceivers.get(ir));
					ir++;
				}
				
				
				//step8: 处理串行广播
				if ((receivers != null && receivers.size() > 0)
						|| resultTo != null) {
					BroadcastQueue queue = broadcastQueueForIntent(intent);
					//创建BroadcastRecord
					BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp,
							callerPackage, callingPid, callingUid, resolvedType,
							requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,
							resultData, resultExtras, ordered, sticky, false, userId);

					boolean replaced = replacePending && queue.replaceOrderedBroadcastLocked(r);
					if (!replaced) {
						//将BroadcastRecord加入到有序广播队列
						queue.enqueueOrderedBroadcastLocked(r);
						//处理广播【见小节4.1】
						queue.scheduleBroadcastsLocked();
					}
				}
				
					// 串行广播 加入mOrderedBroadcasts队列
					public void enqueueOrderedBroadcastLocked(BroadcastRecord r) {
						mOrderedBroadcasts.add(r);
						r.enqueueClockTime = System.currentTimeMillis();
					}
			小结：
			发送广播过程, 都会先创建BroadcastRecord对象,并将该对象加入到相应的广播队列, 然后调用BroadcastQueue的scheduleBroadcastsLocked()方法来完成的不同广播处理:

			处理Sticky广播, 见注册广播的[2.5];
			处理并行广播, 见发送广播的[3.4.6];
			处理串行广播, 见发送广播的[3.4.8];

4.处理广播
void scheduleBroadcastsLocked();framework/base/services/core/java/com/android/server/am/BroadcastQueue.java
	 mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, this));  framework/base/services/core/java/com/android/server/am/BroadcastQueue.java
		processNextBroadcast(true);framework/base/services/core/java/com/android/server/am/BroadcastQueue.java$BroadcastHandler
			
			
			step1:处理并行广播
			
			BroadcastRecord r;
			mService.updateCpuStats(); //更新CPU统计信息
			if (fromMsg)  mBroadcastsScheduled = false;

			while (mParallelBroadcasts.size() > 0) {
				r = mParallelBroadcasts.remove(0);
				r.dispatchTime = SystemClock.uptimeMillis();
				r.dispatchClockTime = System.currentTimeMillis();
				final int N = r.receivers.size();
				for (int i=0; i<N; i++) {
					Object target = r.receivers.get(i);
					//分发广播给已注册的receiver 【见小节4.3】
					deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, false);
				}
				addBroadcastToHistoryLocked(r);//将广播添加历史统计
			}
			
			通过while循环, 一次性分发完所有的并发广播后,则分发完成后则添加到历史广播队列. fromMsg是指processNextBroadcast()是否由BroadcastHandler所调用的.

			
			step2:处理有序广播
			
			if (mPendingBroadcast != null) {
			boolean isDead;
			synchronized (mService.mPidsSelfLocked) {
				//从mPidsSelfLocked获取正在处理该广播进程，判断该进程是否死亡
				ProcessRecord proc = mService.mPidsSelfLocked.get(mPendingBroadcast.curApp.pid);
				isDead = proc == null || proc.crashing;
			}
			if (!isDead) {
				return; //正在处理广播的进程保持活跃状态，则继续等待其执行完成
			} else {
				mPendingBroadcast.state = BroadcastRecord.IDLE;
				mPendingBroadcast.nextReceiver = mPendingBroadcastRecvIndex;
				mPendingBroadcast = null;
			}
		}

			boolean looped = false;
			do {
				if (mOrderedBroadcasts.size() == 0) {
					//所有串行广播处理完成，则调度执行gc
					mService.scheduleAppGcsLocked();
					if (looped) {
						mService.updateOomAdjLocked();
					}
					return;
				}
				r = mOrderedBroadcasts.get(0);
				boolean forceReceive = false;

				//获取所有该广播所有的接收者
				int numReceivers = (r.receivers != null) ? r.receivers.size() : 0;
				if (mService.mProcessesReady && r.dispatchTime > 0) {
					long now = SystemClock.uptimeMillis();
					if ((numReceivers > 0) &&
							(now > r.dispatchTime + (2*mTimeoutPeriod*numReceivers))) {
						//当广播处理时间超时，则强制结束这条广播
						broadcastTimeoutLocked(false);
						forceReceive = true;
						r.state = BroadcastRecord.IDLE;
					}
				}

				if (r.state != BroadcastRecord.IDLE) {
					return;
				}

				if (r.receivers == null || r.nextReceiver >= numReceivers
						|| r.resultAbort || forceReceive) {
					如果是最后一个广播才走这里，并且循环回去进行GC.然后return。否则走下面的step3.
					if (r.resultTo != null) {
						如果需要结果的resultTo不为空则//处理广播消息消息，调用到onReceive() 为r.resultTo为IIntentReceiver对象。如果不为空则进入下面的代码部分。普通广播是r.resultTo是为空的
						performReceiveLocked(r.callerApp, r.resultTo,
							new Intent(r.intent), r.resultCode,
							r.resultData, r.resultExtras, false, false, r.userId);
						r.resultTo = null;
					}
					//取消BROADCAST_TIMEOUT_MSG消息
					cancelBroadcastTimeoutLocked();

					addBroadcastToHistoryLocked(r);
					mOrderedBroadcasts.remove(0);
					r = null;
					looped = true;
					continue;
				}
			} while (r == null);
		
		
		
			step3：获取下条有序广播
			
			//获取下一个receiver的index
			int recIdx = r.nextReceiver++;

			r.receiverTime = SystemClock.uptimeMillis();
			if (recIdx == 0) {
				r.dispatchTime = r.receiverTime;
				r.dispatchClockTime = System.currentTimeMillis();
			}
			if (!mPendingBroadcastTimeoutMessage) {
				long timeoutTime = r.receiverTime + mTimeoutPeriod;
				//设置广播超时时间，发送BROADCAST_TIMEOUT_MSG
				setBroadcastTimeoutLocked(timeoutTime);
			}

			final BroadcastOptions brOptions = r.options;
			//获取下一个广播接收者
			final Object nextReceiver = r.receivers.get(recIdx);

			if (nextReceiver instanceof BroadcastFilter) {
				//对于动态注册的广播接收者，deliverToRegisteredReceiverLocked处理广播
				BroadcastFilter filter = (BroadcastFilter)nextReceiver;
				deliverToRegisteredReceiverLocked(r, filter, r.ordered);
				if (r.receiver == null || !r.ordered) {
					r.state = BroadcastRecord.IDLE;
					scheduleBroadcastsLocked();
				} else {
					...
				}
				return;
			}

			//对于静态注册的广播接收者
			ResolveInfo info = (ResolveInfo)nextReceiver;
			ComponentName component = new ComponentName(
					info.activityInfo.applicationInfo.packageName,
					info.activityInfo.name);
			...
			//执行各种权限检测，此处省略，当权限不满足时skip=true

			if (skip) {
				r.receiver = null;
				r.curFilter = null;
				r.state = BroadcastRecord.IDLE;
				scheduleBroadcastsLocked();
				return;
			}

			r.state = BroadcastRecord.APP_RECEIVE;
			String targetProcess = info.activityInfo.processName;
			r.curComponent = component;
			final int receiverUid = info.activityInfo.applicationInfo.uid;
			if (r.callingUid != Process.SYSTEM_UID && isSingleton
					&& mService.isValidSingletonCall(r.callingUid, receiverUid)) {
				info.activityInfo = mService.getActivityInfoForUser(info.activityInfo, 0);
			}
			r.curReceiver = info.activityInfo;
			...

			//Broadcast正在执行中，stopped状态设置成false
			AppGlobals.getPackageManager().setPackageStoppedState(
					r.curComponent.getPackageName(), false, UserHandle.getUserId(r.callingUid));

					
			step4:处理下条有序广播
			
			//该receiver所对应的进程已经运行，则直接处理
			ProcessRecord app = mService.getProcessRecordLocked(targetProcess,
					info.activityInfo.applicationInfo.uid, false);
			if (app != null && app.thread != null) {
				try {
					app.addPackage(info.activityInfo.packageName,
							info.activityInfo.applicationInfo.versionCode, mService.mProcessStats);
					processCurBroadcastLocked(r, app);
					return;
				} catch (RemoteException e) {
				} catch (RuntimeException e) {
					finishReceiverLocked(r, r.resultCode, r.resultData, r.resultExtras, r.resultAbort, false);
					scheduleBroadcastsLocked();
					r.state = BroadcastRecord.IDLE; //启动receiver失败则重置状态
					return;
				}
			}

			//该receiver所对应的进程尚未启动，则创建该进程
			if ((r.curApp=mService.startProcessLocked(targetProcess,
					info.activityInfo.applicationInfo, true,
					r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,
					"broadcast", r.curComponent,
					(r.intent.getFlags()&Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0, false, false))
							== null) {
				//创建失败，则结束该receiver
				finishReceiverLocked(r, r.resultCode, r.resultData,
						r.resultExtras, r.resultAbort, false);
				scheduleBroadcastsLocked();
				r.state = BroadcastRecord.IDLE;
				return;
			} 
			mPendingBroadcast = r;
			mPendingBroadcastRecvIndex = recIdx;

			如果是动态广播接收者，则调用deliverToRegisteredReceiverLocked处理；
			如果是静态广播接收者，且对应进程已经创建，则调用processCurBroadcastLocked处理；
			如果是静态广播接收者，且对应进程尚未创建，则调用startProcessLocked创建进程。


四：deliverToRegisteredReceiverLocked  framework/base/services/core/java/com/android/server/am/BroadcastQueue.java 并行广播

private void deliverToRegisteredReceiverLocked(BroadcastRecord r,
        BroadcastFilter filter, boolean ordered) {
    ...
    //检查发送者是否有BroadcastFilter所需权限
    //以及接收者是否有发送者所需的权限等等
    //当权限不满足要求，则skip=true。

    if (!skip) {
        //并行广播ordered = false，只有串行广播才进入该分支
        if (ordered) {
            r.receiver = filter.receiverList.receiver.asBinder();
            r.curFilter = filter;
            filter.receiverList.curBroadcast = r;
            r.state = BroadcastRecord.CALL_IN_RECEIVE;
            if (filter.receiverList.app != null) {
                r.curApp = filter.receiverList.app;
                filter.receiverList.app.curReceiver = r;
                mService.updateOomAdjLocked(r.curApp);
            }
        }
        // 处理广播【见小节4.4】
        performReceiveLocked(filter.receiverList.app, filter.receiverList.receiver,
                new Intent(r.intent), r.resultCode, r.resultData,
                r.resultExtras, r.ordered, r.initialSticky, r.userId);
        if (ordered) {
            r.state = BroadcastRecord.CALL_DONE_RECEIVE;
        }
        ...
    }
}

	private static void performReceiveLocked(ProcessRecord app, IIntentReceiver receiver,      framework/base/services/core/java/com/android/server/am/BroadcastQueue.java
        Intent intent, int resultCode, String data, Bundle extras,
        boolean ordered, boolean sticky, int sendingUser) throws RemoteException {
		//通过binder异步机制，向receiver发送intent
		if (app != null) {
			if (app.thread != null) {
				//调用ApplicationThreadProxy类对应的方法 【4.5】
				app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,
						data, extras, ordered, sticky, sendingUser, app.repProcState);
			} else {
				//应用进程死亡，则Recevier并不存在
				throw new RemoteException("app.thread must not be null");
			}
		} else {
			//调用者进程为空，则执行该分支
			receiver.performReceive(intent, resultCode, data, extras, ordered,
					sticky, sendingUser);
		}
	}

		
		public void scheduleRegisteredReceiver(IIntentReceiver receiver, Intent intent,      framework/base/core/java/android/app/ActivityThread.java
			int resultCode, String dataStr, Bundle extras, boolean ordered,
			boolean sticky, int sendingUser, int processState) throws RemoteException {
			//更新虚拟机进程状态
			updateProcessState(processState, false);
			//【见小节4.7】
			receiver.performReceive(intent, resultCode, dataStr, extras, ordered,
					sticky, sendingUser);
		}

		此处receiver是注册广播时创建的，见小节[2.3]，可知该receiver=LoadedApk.ReceiverDispatcher.InnerReceiver。
			
			public void performReceive(Intent intent, int resultCode, String data,            framework/base/core/java/android/app/LoadedApk
					Bundle extras, boolean ordered, boolean sticky, int sendingUser) {
				LoadedApk.ReceiverDispatcher rd = mDispatcher.get();
				if (rd != null) {
					//【见小节4.8】
					rd.performReceive(intent, resultCode, data, extras, ordered, sticky, sendingUser);
				} else {
				   ...
				}
			}
		
		此处方法rd属于LoadedApk.ReceiverDispatcher.InnerReceiver, 也就是LoadedApk内部类的内部类InnerReceiver.  

			public void performReceive(Intent intent, int resultCode, String data,           framework/base/core/java/android/app/LoadedApk.java$ReceiverDispatcher$InnerReceiver
					Bundle extras, boolean ordered, boolean sticky, int sendingUser) {
				Args args = new Args(intent, resultCode, data, extras, ordered,
						sticky, sendingUser);
				//通过handler消息机制发送args.
				if (!mActivityThread.post(args)) {
					if (mRegistered && ordered) {
						IActivityManager mgr = ActivityManagerNative.getDefault();
						args.sendFinished(mgr);
					}
				}
			}
			
			其中Args继承于BroadcastReceiver.PendingResult，实现了接口Runnable; 其中mActivityThread是当前进程的主线程, 是由注册时scheduler = mMainThread.getHandler();完成赋值过程.
			这里mActivityThread.post(args) 消息机制，关于Handler消息机制，见Android消息机制1-Handler(Java层)，把消息放入MessageQueue，再调用Args的run()方法。
			
			
					public final class LoadedApk {                                         framework/base/core/java/android/app/LoadedApk.java
					  static final class ReceiverDispatcher {
						final class Args extends BroadcastReceiver.PendingResult implements Runnable {
							public void run() {
								final BroadcastReceiver receiver = mReceiver;
								final boolean ordered = mOrdered;

								final IActivityManager mgr = ActivityManagerNative.getDefault();
								final Intent intent = mCurIntent;
								mCurIntent = null;

								if (receiver == null || mForgotten) {
									if (mRegistered && ordered) {
										sendFinished(mgr);
									}
									return;
								}

								try {
									//获取mReceiver的类加载器
									ClassLoader cl =  mReceiver.getClass().getClassLoader();
									intent.setExtrasClassLoader(cl);
									setExtrasClassLoader(cl);
									receiver.setPendingResult(this);
									//回调广播onReceive方法
									receiver.onReceive(mContext, intent);
								} catch (Exception e) {
									...
								}

								if (receiver.getPendingResult() != null) {
									finish(); //【见小节4.10】
								}
							}
						  }
					
					接下来,便进入主线程,最终调用BroadcastReceiver具体实现类的onReceive()方法。

					
					public final void finish() 													framework/base/core/java/android/content/BroadcastReceiver.java
						final IActivityManager mgr = ActivityManagerNative.getDefault();
						sendFinished(mgr);
						...
					}

					public void sendFinished(IActivityManager am) {
						synchronized (this) {
							try {
								if (mResultExtras != null) {
									mResultExtras.setAllowFds(false);
								}
								if (mOrderedHint) {
									//串行广播
									am.finishReceiver(mToken, mResultCode, mResultData, mResultExtras,
											mAbortBroadcast, mFlags);
								} else {
									//并行广播
									am.finishReceiver(mToken, 0, null, null, false, mFlags);
								}
							} catch (RemoteException ex) {
							}
						}
					}

					此处AMP.finishReceiver，经过binder调用，进入AMS.finishReceiver方法

				public void finishReceiver(IBinder who, int resultCode, String resultData,            framework/base/services/core/java/com/android/server/ActivityManagerService.java
						Bundle resultExtras, boolean resultAbort, int flags) {
					...
					final long origId = Binder.clearCallingIdentity();
					try {
						boolean doNext = false;
						BroadcastRecord r;

						synchronized(this) {
							BroadcastQueue queue = (flags & Intent.FLAG_RECEIVER_FOREGROUND) != 0
									? mFgBroadcastQueue : mBgBroadcastQueue;
							r = queue.getMatchingOrderedReceiver(who);
							if (r != null) {
								doNext = r.queue.finishReceiverLocked(r, resultCode,
									resultData, resultExtras, resultAbort, true);
							}
						}

						if (doNext) {
							//处理下一条广播
							r.queue.processNextBroadcast(false);
						}
						trimApplications();
					} finally {
						Binder.restoreCallingIdentity(origId);
					}
				}

				public boolean finishReceiverLocked(BroadcastRecord r, int resultCode         	framework/base/services/core/java/com/android/server/am/BroadcastQueue.java    
						String resultData, Bundle resultExtras, boolean resultAbort, boolean waitForServices) {
					final int state = r.state;
					final ActivityInfo receiver = r.curReceiver;
					r.state = BroadcastRecord.IDLE;

					r.receiver = null;
					r.intent.setComponent(null);
					if (r.curApp != null && r.curApp.curReceiver == r) {
						r.curApp.curReceiver = null;
					}
					if (r.curFilter != null) {
						r.curFilter.receiverList.curBroadcast = null;
					}
					r.curFilter = null;
					r.curReceiver = null;
					r.curApp = null;
					mPendingBroadcast = null;

					r.resultCode = resultCode;
					r.resultData = resultData;
					r.resultExtras = resultExtras;
					if (resultAbort && (r.intent.getFlags()&Intent.FLAG_RECEIVER_NO_ABORT) == 0) {
						r.resultAbort = resultAbort;
					} else {
						r.resultAbort = false;
					}

					if (waitForServices && r.curComponent != null && r.queue.mDelayBehindServices
							&& r.queue.mOrderedBroadcasts.size() > 0
							&& r.queue.mOrderedBroadcasts.get(0) == r) {
						ActivityInfo nextReceiver;
						if (r.nextReceiver < r.receivers.size()) {
							Object obj = r.receivers.get(r.nextReceiver);
							nextReceiver = (obj instanceof ActivityInfo) ? (ActivityInfo)obj : null;
						} else {
							nextReceiver = null;
						}

						if (receiver == null || nextReceiver == null
								|| receiver.applicationInfo.uid != nextReceiver.applicationInfo.uid
								|| !receiver.processName.equals(nextReceiver.processName)) {
							if (mService.mServices.hasBackgroundServices(r.userId)) {
								r.state = BroadcastRecord.WAITING_SERVICES;
								return false;
							}
						}
					}
					r.curComponent = null;

					return state == BroadcastRecord.APP_RECEIVE
							|| state == BroadcastRecord.CALL_DONE_RECEIVE;
				}
五、总结

5.1 基础知识
1.BroadcastReceiver分为两类：

静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver;
动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver, 不需要时记得调用unregisterReceiver();

2.广播发送方式可分为三类:
-------------------------------------------------------------------
类型		|	方法					|	serialized	|	sticky|
-------------------------------------------------------------------
普通广播	|	sendBroadcast			|	false		|	false |
-------------------------------------------------------------------
有序广播	|	sendOrderedBroadcast	|	true		|	false |
-------------------------------------------------------------------
Sticky广播	|	sendStickyBroadcast		|	false		|	true  |
-------------------------------------------------------------------

3.广播注册registerReceiver():默认将当前进程的主线程设置为scheuler. 再向AMS注册该广播相应信息, 根据类型选择加入mParallelBroadcasts或mOrderedBroadcasts队列.

4.广播发送processNextBroadcast():根据不同情况调用不同的处理过程:

如果是动态广播接收者，则调用deliverToRegisteredReceiverLocked处理；
如果是静态广播接收者，且对应进程已经创建，则调用processCurBroadcastLocked处理；
如果是静态广播接收者，且对应进程尚未创建，则调用startProcessLocked创建进程。


再来说说几个关键的时间点:
enqueueClockTime: 位于步骤4 scheduleBroadcastsLocked(), 这是在system_server的binder线程.
dispatchClockTime: 位于步骤8 deliverToRegisteredReceiverLocked(),这是在system_server的ActivityManager线程.
finishTime : 位于步骤11 addBroadcastToHistoryLocked()之后, 这是在并行广播向所有receivers发送完成后的时间点,而串行广播则是一个一个发送完成才会继续.

