/frameworks/base/services/core/java/com/android/server/am/ActiveServices.java
/frameworks/base/services/core/java/com/android/server/am/ServiceRecord.java
/frameworks/base/services/core/java/com/android/server/am/ProcessRecord.java

/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
/frameworks/base/core/java/android/app/IActivityManager.java
/frameworks/base/core/java/android/app/ActivityManagerNative.java (内含ActivityManagerProxy类)
/frameworks/base/core/java/android/app/ActivityManager.java

/frameworks/base/core/java/android/app/IApplicationThread.java
/frameworks/base/core/java/android/app/ApplicationThreadNative.java (内含ApplicationThreadProxy类)
/frameworks/base/core/java/android/app/ActivityThread.java (内含ApplicationThread类)

/frameworks/base/core/java/android/app/ContextImpl.java

1.start service的启动过程。http://gityuan.com/2016/03/06/start-service/ 
startService()； //或 binderService() frameworks/base/core/java/android/app/activity.java
	startServiceCommon(service, mUser); frameworks/base/core/java/android/app/ContextImpl.java
		 ActivityManagerNative.getDefault().startService(mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(getContentResolver()), getOpPackageName(), user.getIdentifier());frameworks/base/core/java/android/app/ContextImpl.java
			startService(IApplicationThread caller, Intent service,String resolvedType, String callingPackage, int userId) frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java //1.caller：IApplicationThread类型，复杂处理2.service：Intent类型，包含需要运行的service信息3.resolvedType：String类型4.callingPackage: String类型，调用该方法的package5.userId: int类型，用户的id
				mServices.startServiceLocked(caller, service,resolvedType, callingPid, callingUid, callingPackage, userId); frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java 	//此次的mServices为ActiveServices对象\
					retrieveServiceLocked(service, resolvedType, callingPackage,callingPid, callingUid, userId, true, callerFg); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java // 检索服务信息
					startServiceInnerLocked(smap, service, r, callerFg, addToStarting);  frameworks/base/services/core/java/com/android/server/am/ActiveServices.java
						bringUpServiceLocked(r, service.getFlags(), callerFg, false); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java //检查进程是否存在，如果不存在调用mAm.startProcessLocked 开启进程。如果进程存在则调用realStartServiceLocked开启service
							mAm.startProcessLocked(procName, r.appInfo, true, intentFlags,"service", r.name, false, isolated, false)) frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  //mAm 为ActivityManagerService的对象
								attachApplicationLocked(IApplicationThread thread,int pid) frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java  //进程启动后调用activitythread的attach,最终调用到AMS的attachApplicationLocked方法
									thread.bindApplication(...) frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java //调用activitythread的bindapplication,将应用进程的ApplicationThread对象绑定到ActivityManagerService，也就是说获得AppliacationThread对象的代理对象。并且创建application对象并调用其 oncreate方法。
									mServices.attachApplicationLocked(app, processName); frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java   //调用AS的attachApplicationLocked间接调用realStartServiceLocked(...)方法
										realStartServiceLocked(sr, proc, sr.createdFromFg);  /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  真正启动service
											bumpServiceExecutingLocked(r, execInFg, "create"); /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  在bumpServiceExecutingLocked会发送一个延迟处理的消息SERVICE_TIMEOUT_MSG。在方法scheduleCreateService执行完成，也就是onCreate回调执行完成之后，便会remove掉该消息。但是如果没能在延时时间之内remove该消息，则会进入执行service timeout流程。
												scheduleServiceTimeoutLocked(r.app); /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  延时机制使用handler来实现的
											app.thread.scheduleCreateService(r, r.serviceInfo,mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),app.repProcState);  /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java //服务进入 onCreate()
												scheduleCreateService(token, info, compatInfo, processState); /frameworks/base/core/java/android/app/ActivityThread.java的内含ApplicationThread类 调用ApplicationThread的scheduleCreateService方法 发送handler消息。来创建色儿service，也就是调用service的oncreate方法。
													handleCreateService((CreateServiceData)msg.obj); /frameworks/base/core/java/android/app/ActivityThread.java 
														Application app = packageInfo.makeApplication(false, mInstrumentation); /frameworks/base/core/java/android/app/ActivityThread.java  //packageInfo.makeApplication实际并未创建Application对象，因为bindApplication过程已经创建了Application的对象。makeApplication方法会返回已创建的Application对象。
														service.onCreate(); 调用service的oncreate方法。
														ActivityManagerNative.getDefault().serviceDoneExecuting(data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);  /frameworks/base/core/java/android/app/ActivityThread.java
															mServices.serviceDoneExecutingLocked((ServiceRecord)token, type, startId, res); frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java 上文bumpServiceExecutingLocked()发送一个延时消息SERVICE_TIMEOUT_MSG，此时移除服务启动超时的消息
																 serviceDoneExecutingLocked(r, inDestroying, inDestroying); //上文bumpServiceExecutingLocked()发送一个延时消息SERVICE_TIMEOUT_MSG，此时移除服务启动超时的消息
											sendServiceArgsLocked(r, execInFg, true); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  //进入onStartCommand() 
												r.app.thread.scheduleServiceArgs(r, si.taskRemoved, si.id, flags, si.intent); /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  //进入onStartCommand() 
													与oncreate 类似省略
/frameworks/base/core/java/android/app/ContextImpl.java
/frameworks/base/core/java/android/app/LoadedApk.java
/frameworks/base/core/java/android/app/IServiceConnection.aidl(自动生成Binder两端)
												
2.bind service的启动过程。http://gityuan.com/2016/05/01/bind-service/								
bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
	mBase.bindService(service, conn, flags);  frameworks/base/core/java/android/app/ContextImpl.java 
		bindServiceCommon(service, conn, flags, Process.myUserHandle());  frameworks/base/core/java/android/app/ContextImpl.java 
			mPackageInfo.getServiceDispatcher(conn, getOuterContext(),mMainThread.getHandler(), flags);  frameworks/base/core/java/android/app/ContextImpl.java  //创建对象内部静态类LoadedApk.ServiceDispatcher.InnerConnection的对象;方便新建service的回传IBinder值使用
				sd = new ServiceDispatcher(c, context, handler, flags); frameworks/base/core/java/android/app/LoadedApk.java  //创建服务分发对象 IServiceConnection sd;
			ActivityManagerNative.getDefault().bindService(mMainThread.getApplicationThread(), getActivityToken(), service,service.resolveTypeIfNeeded(getContentResolver()),sd, flags, getOpPackageName(), user.getIdentifier());  frameworks/base/core/java/android/app/ContextImpl.java  //跨进程
				mServices.bindServiceLocked(caller, token, service,resolvedType, connection, flags, callingPackage, userId); frameworks/base/core/java/android/app/ActivityManager.java  mService为ActiveServices的对象
				retrieveServiceLocked(service, resolvedType, callingPackage,Binder.getCallingPid(), Binder.getCallingUid(), userId, true, callerFg); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java 根据用户传递进来Intent来检索相对应的服务
				s.retrieveAppBindingLocked(service, callerApp); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java //通过retrieveServiceLocked(),根据用户传递进来Intent来检索相对应的服务
				AppBindRecord b = s.retrieveAppBindingLocked(service, callerApp); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java //通过retrieveAppBindingLocked().创建AppBindRecord对象记录着当前ServiceRecord, intent以及发起方的进程信息。
				ConnectionRecord c = new ConnectionRecord(b, activity,connection, flags, clientLabel, clientIntent);frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  //创建对象ConnectionRecord,此处connection来自发起方，此时将LoadedApk.ServiceDispatcher.InnerConnection对象包装进ConnectionRecord。以InnerConnection为key，以ConnectionRecord为成员的arrayList为value装进ServiceRecord的connections中
				bringUpServiceLocked(s, service.getFlags(), callerFg, false) frameworks/base/services/core/java/com/android/server/am/ActiveServices.java //检查进程是否存在，如果不存在调用mAm.startProcessLocked 开启进程。如果进程存在则调用realStartServiceLocked开启service. 
					mAm.startProcessLocked(procName, r.appInfo, true, intentFlags,"service", r.name, false, isolated, false)) frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  //mAm 为ActivityManagerService的对象
								attachApplicationLocked(IApplicationThread thread,int pid) frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java  //进程启动后调用activitythread的attach,最终调用到AMS的attachApplicationLocked方法
									thread.bindApplication(...) frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java //调用activitythread的bindapplication,将应用进程的ApplicationThread对象绑定到ActivityManagerService，也就是说获得AppliacationThread对象的代理对象。并且创建application对象并调用其 oncreate方法。
									mServices.attachApplicationLocked(app, processName); frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java   //调用AS的attachApplicationLocked间接调用realStartServiceLocked(...)方法
										realStartServiceLocked(sr, proc, sr.createdFromFg);  /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  真正启动service
											bumpServiceExecutingLocked(r, execInFg, "create"); /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  在bumpServiceExecutingLocked会发送一个延迟处理的消息SERVICE_TIMEOUT_MSG。在方法scheduleCreateService执行完成，也就是onCreate回调执行完成之后，便会remove掉该消息。但是如果没能在延时时间之内remove该消息，则会进入执行service timeout流程。
												scheduleServiceTimeoutLocked(r.app); /frameworks/base/services/core/java/com/android/server/am/ActiveServices.java  延时机制使用handler来实现的
											app.thread.scheduleCreateService(r, r.serviceInfo,mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),app.repProcState); //服务进入 onCreate()
												scheduleCreateService(token, info, compatInfo, processState); /frameworks/base/core/java/android/app/ActivityThread.java的内含ApplicationThread类 调用ApplicationThread的scheduleCreateService方法 发送handler消息。来创建色儿service，也就是调用service的oncreate方法。
													handleCreateService((CreateServiceData)msg.obj); /frameworks/base/core/java/android/app/ActivityThread.java 
														Application app = packageInfo.makeApplication(false, mInstrumentation); /frameworks/base/core/java/android/app/ActivityThread.java  //packageInfo.makeApplication实际并未创建Application对象，因为bindApplication过程已经创建了Application的对象。makeApplication方法会返回已创建的Application对象。
														service.onCreate(); 调用service的oncreate方法。
														ActivityManagerNative.getDefault().serviceDoneExecuting(data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);  /frameworks/base/core/java/android/app/ActivityThread.java
															mServices.serviceDoneExecutingLocked((ServiceRecord)token, type, startId, res); frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java 上文bumpServiceExecutingLocked()发送一个延时消息SERVICE_TIMEOUT_MSG，此时移除服务启动超时的消息
																 serviceDoneExecutingLocked(r, inDestroying, inDestroying); //上文bumpServiceExecutingLocked()发送一个延时消息SERVICE_TIMEOUT_MSG，此时移除服务启动超时的消息
											requestServiceBindingsLocked(r, execInFg); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java 
												requestServiceBindingLocked(r, ibr, execInFg, false); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java 
													 r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind, r.app.repProcState); frameworks/base/services/core/java/com/android/server/am/ActiveServices.java //服务进入 onBind()
														 sendMessage(H.BIND_SERVICE, s)  frameworks/base/core/java/android/app/ActivityThread.java (内含ApplicationThread类) //s.token = token(ServiceRecord类型); s.intent = intent; s.rebind = rebind;
															handleBindService(BindServiceData data) frameworks/base/core/java/android/app/ActivityThread.java 
																s.onBind(data.intent); frameworks/base/core/java/android/app/ActivityThread.java  执行创建Service.onBind()回调方法
																ActivityManagerNative.getDefault().publishService(data.token, data.intent, binder);  //将onBind返回值传递回去
																	mServices.publishServiceLocked((ServiceRecord)token, intent, service);  frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java //ActiveServices 的对象为mServices
																		 c.conn.connected(r.name, service);  frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
																			  sd.connected(name, service); /frameworks/base/core/java/android/app/LoadedApk.ServiceDispatcher.InnerConnection //调用LoadedApk.ServiceDispatcher.InnerConnection静态类的connected方法
																				mActivityThread.post(new RunConnection(name, service, 0)); /frameworks/base/core/java/android/app/LoadedApk.ServiceDispatcher //这是主线程的Handler
																					doConnected(mName, mService);  frameworks/base/core/java/android/app/LoadedApk.ServiceDispatcher.RunConnection
																						mConnection.onServiceConnected(name, service);  frameworks/base/core/java/android/app/LoadedApk.ServiceDispatche //回传IBinder 
				
				
				
				
				
				